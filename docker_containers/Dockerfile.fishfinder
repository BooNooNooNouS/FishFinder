# This Dockerfile is used to build the FishFinder image.  It is based on the InvenTree contributor's Dockerfile.
    #
# production:
# - Required files are copied into the image
# - Runs InvenTree web server under gunicorn
#
# dev:
# - Expects source directories to be loaded as a run-time volume
# - Runs InvenTree web server under django development server
# - Monitors source files for any changes, and live-reloads server

FROM ubuntu-python-3-12 AS fishfinder_base
    
    # Build arguments for this image
    ARG commit_tag=""
    ARG commit_hash=""
    ARG commit_date=""
    
    ARG data_dir="data"
    
    ENV PYTHONUNBUFFERED=1
    ENV PIP_DISABLE_PIP_VERSION_CHECK=1
    ENV INVOKE_RUN_SHELL="/bin/bash"
    
    ENV INVENTREE_DOCKER="true"
    
    # InvenTree paths
    ENV INVENTREE_HOME="/home/inventree"
    ENV INVENTREE_DATA_DIR="${INVENTREE_HOME}/${data_dir}"
    ENV INVENTREE_STATIC_ROOT="${INVENTREE_DATA_DIR}/static"
    ENV INVENTREE_MEDIA_ROOT="${INVENTREE_DATA_DIR}/media"
    ENV INVENTREE_BACKUP_DIR="${INVENTREE_DATA_DIR}/backup"
    ENV INVENTREE_PLUGIN_DIR="${INVENTREE_DATA_DIR}/plugins"
    
    ENV INVENTREE_BACKEND_DIR="${INVENTREE_HOME}/src/backend"
    
    # InvenTree configuration files
    ENV INVENTREE_CONFIG_FILE="${INVENTREE_DATA_DIR}/config.yaml"
    ENV INVENTREE_SECRET_KEY_FILE="${INVENTREE_DATA_DIR}/secret_key.txt"
    ENV INVENTREE_OIDC_PRIVATE_KEY_FILE="${INVENTREE_DATA_DIR}/oidc.pem"
    ENV INVENTREE_PLUGIN_FILE="${INVENTREE_DATA_DIR}/plugins.txt"
    
    # Worker configuration (can be altered by user)
    ENV INVENTREE_GUNICORN_WORKERS="4"
    ENV INVENTREE_BACKGROUND_WORKERS="4"
    
    # Default web server address:port
    ENV INVENTREE_WEB_ADDR=0.0.0.0
    ENV INVENTREE_WEB_PORT=8000
    
    
    # Install required system level packages
    
    RUN apt-get update && apt-get install -y \
        python3 \
        python3-dev \
        python3-pip \
        python3-invoke \
        python3-venv \
        python3.11 \
        python3.11-dev \
        git \
        gcc
        # # Postgres client (note: backwards compatible with postgres server <= 16)
        # postgresql16-client \
        # # MySQL / MariaDB client
        # mariadb-client mariadb-connector-c \
        # && \
        # # font support
        # apt-get --update --upgrade --no-cache add fontconfig ttf-freefont font-terminus font-noto font-noto-cjk font-noto-extra \
        # && fc-cache -f
    
    EXPOSE 8000
    
    RUN mkdir -p ${INVENTREE_HOME}
    WORKDIR ${INVENTREE_HOME}
    
    COPY docker_containers/requirements.txt base_requirements.txt
    COPY src/backend/requirements.txt ./
    # COPY src/backend/InvenTree/config_template.yaml ${INVENTREE_HOME}/src/backend/InvenTree/config_template.yaml
    COPY docker_containers/install_build_packages.sh .
    RUN chmod +x install_build_packages.sh
    
    COPY tasks.py docker_containers/ ./
    RUN chmod +x install_build_packages.sh
    RUN chmod +x init.sh
    
    ENTRYPOINT ["/bin/bash", "/home/inventree/docker_containers/init.sh"]
    
    FROM fishfinder_base AS prebuild
    
    ENV PATH=/root/.local/bin:$PATH
    # RUN ./install_build_packages.sh --no-cache --virtual .build-deps && \
    # Install build dependencies first to avoid conflicts
    RUN pip install --user --no-cache setuptools wheel
    # Then install the actual requirements, ignoring any distutils-installed packages
    RUN pip install --user --require-hashes -r base_requirements.txt --no-cache --force-reinstall --ignore-installed pyyaml setuptools && \
        pip install --user --require-hashes -r requirements.txt --no-cache --force-reinstall --ignore-installed pyyaml setuptools && \
        apt-get purge -y --auto-remove .build-deps
    
# Frontend builder image:
FROM prebuild AS frontend

    # INSTALL NODEJS, NPM, YARN, BASH ON UBUNTU
    # RUN apt-get update && apt-get install -y nodejs npm yarn bash
    
    RUN apt-get update && apt-get --no-cache install -y nodejs npm yarn bash
    RUN npm install -g --ignore-scripts n@10.1.0
    RUN bash -c "n lts"
    RUN yarn config set network-timeout 600000 -g
    COPY src ${INVENTREE_HOME}/src
    COPY tasks.py ${INVENTREE_HOME}/tasks.py
    
    # Set default locale for frontend build (can be overridden by build arg)
    ARG VITE_DEFAULT_LOCALE=es_MX
    ENV VITE_DEFAULT_LOCALE=${VITE_DEFAULT_LOCALE}
    
    RUN cd ${INVENTREE_HOME} && invoke int.frontend-compile
    
# InvenTree production image:
# - Copies required files from local directory
# - Starts a gunicorn webserver
FROM fishfinder_base AS production
    
    ENV INVENTREE_DEBUG=False
    
    # As .git directory is not available in production image, we pass the commit information via ENV
    ENV INVENTREE_COMMIT_HASH="${commit_hash}"
    ENV INVENTREE_COMMIT_DATE="${commit_date}"
    
    # use dependencies and compiled wheels from the prebuild image
    ENV PATH=/root/.local/bin:$PATH
    COPY --from=prebuild /root/.local /root/.local
    
    
    # Copy source code
    COPY src/backend/InvenTree ${INVENTREE_BACKEND_DIR}/InvenTree
    COPY src/backend/requirements.txt ${INVENTREE_BACKEND_DIR}/requirements.txt
    COPY --from=frontend ${INVENTREE_BACKEND_DIR}/InvenTree/web/static/web ${INVENTREE_BACKEND_DIR}/InvenTree/web/static/web
    
    # Launch the production server
    CMD gunicorn -c /home/inventree/docker_containers/gunicorn.conf.py InvenTree.wsgi -b 0.0.0.0:8000 --chdir ${INVENTREE_BACKEND_DIR}/InvenTree
    
FROM fishfinder_base AS dev
    
    # Vite server (for local frontend development)
    EXPOSE 5173
    
    # Install packages required for building python packages
    RUN ./install_build_packages.sh

    # Create a virtual environment to avoid system package conflicts
    RUN python3.12 -m venv /opt/venv
    ENV PATH="/opt/venv/bin:$PATH"
    
    # Install build dependencies in the virtual environment
    RUN pip install --no-cache setuptools wheel
    # Then install the actual requirements
    RUN pip install --require-hashes -r base_requirements.txt --no-cache
    
    # # Install nodejs / npm / yarn
    
    RUN apt-get update && apt-get install -y nodejs npm bash
    RUN npm install -g --ignore-scripts n@10.1.0
    RUN n lts
    # Install yarn via npm (modern version compatible with Python 3.12)
    RUN npm install -g yarn
    RUN yarn config set network-timeout 600000 -g
    
    
    # # The development image requires the source code to be mounted to /home/inventree/
    # # So from here, we don't actually "do" anything, apart from some file management
    
    ENV INVENTREE_DEBUG=True
    
    # # Location for python virtual environment
    # # If the INVENTREE_PY_ENV variable is set, the entrypoint script will use it!
    ENV INVENTREE_PY_ENV="${INVENTREE_DATA_DIR}/env"
    
    WORKDIR ${INVENTREE_HOME}
    
    # # Entrypoint ensures that we are running in the python virtual environment
    ENTRYPOINT ["/bin/bash", "/home/inventree/docker_containers/init.sh"]
    
    # # Launch the development server
    CMD ["invoke", "dev.server", "-a", "${INVENTREE_WEB_ADDR}:${INVENTREE_WEB_PORT}"]
    
